# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'c:\Users\fmavianemac\Documents\Felicia\Python\ipso_phen\main_form.ui'
#
# Created by: PyQt5 UI code generator 5.13.0
#
# WARNING! All changes made in this file will be lost!


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1176, 869)
        font = QtGui.QFont()
        font.setFamily("Consolas")
        MainWindow.setFont(font)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(":/icons/resources/leaf-24.ico"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        MainWindow.setToolTipDuration(-4)
        MainWindow.setStatusTip("")
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_2 = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.horizontalLayout_5 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_5.setObjectName("horizontalLayout_5")
        self.chk_experiment = QtWidgets.QCheckBox(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.chk_experiment.setFont(font)
        self.chk_experiment.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.chk_experiment.setChecked(True)
        self.chk_experiment.setObjectName("chk_experiment")
        self.horizontalLayout_5.addWidget(self.chk_experiment)
        self.cb_experiment = QtWidgets.QComboBox(self.centralwidget)
        self.cb_experiment.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cb_experiment.setObjectName("cb_experiment")
        self.horizontalLayout_5.addWidget(self.cb_experiment)
        self.chk_plant = QtWidgets.QCheckBox(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.chk_plant.setFont(font)
        self.chk_plant.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.chk_plant.setChecked(True)
        self.chk_plant.setObjectName("chk_plant")
        self.horizontalLayout_5.addWidget(self.chk_plant)
        self.cb_plant = QtWidgets.QComboBox(self.centralwidget)
        self.cb_plant.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cb_plant.setObjectName("cb_plant")
        self.horizontalLayout_5.addWidget(self.cb_plant)
        self.chk_date = QtWidgets.QCheckBox(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.chk_date.setFont(font)
        self.chk_date.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.chk_date.setChecked(True)
        self.chk_date.setObjectName("chk_date")
        self.horizontalLayout_5.addWidget(self.chk_date)
        self.cb_date = QtWidgets.QComboBox(self.centralwidget)
        self.cb_date.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cb_date.setObjectName("cb_date")
        self.horizontalLayout_5.addWidget(self.cb_date)
        self.chk_camera = QtWidgets.QCheckBox(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.chk_camera.setFont(font)
        self.chk_camera.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.chk_camera.setChecked(True)
        self.chk_camera.setObjectName("chk_camera")
        self.horizontalLayout_5.addWidget(self.chk_camera)
        self.cb_camera = QtWidgets.QComboBox(self.centralwidget)
        self.cb_camera.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cb_camera.setObjectName("cb_camera")
        self.horizontalLayout_5.addWidget(self.cb_camera)
        self.chk_view_option = QtWidgets.QCheckBox(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.chk_view_option.setFont(font)
        self.chk_view_option.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.chk_view_option.setChecked(True)
        self.chk_view_option.setObjectName("chk_view_option")
        self.horizontalLayout_5.addWidget(self.chk_view_option)
        self.cb_view_option = QtWidgets.QComboBox(self.centralwidget)
        self.cb_view_option.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cb_view_option.setObjectName("cb_view_option")
        self.horizontalLayout_5.addWidget(self.cb_view_option)
        self.chk_time = QtWidgets.QCheckBox(self.centralwidget)
        self.chk_time.setMinimumSize(QtCore.QSize(0, 0))
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.chk_time.setFont(font)
        self.chk_time.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.chk_time.setChecked(True)
        self.chk_time.setObjectName("chk_time")
        self.horizontalLayout_5.addWidget(self.chk_time)
        self.cb_time = QtWidgets.QComboBox(self.centralwidget)
        self.cb_time.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cb_time.setObjectName("cb_time")
        self.horizontalLayout_5.addWidget(self.cb_time)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_5.addItem(spacerItem)
        self.verticalLayout_2.addLayout(self.horizontalLayout_5)
        self.horizontalLayout_6 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_6.setObjectName("horizontalLayout_6")
        self.lbl_selection = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.lbl_selection.setFont(font)
        self.lbl_selection.setObjectName("lbl_selection")
        self.horizontalLayout_6.addWidget(self.lbl_selection)
        self.bt_add_to_selection = QtWidgets.QPushButton(self.centralwidget)
        self.bt_add_to_selection.setObjectName("bt_add_to_selection")
        self.horizontalLayout_6.addWidget(self.bt_add_to_selection)
        self.bt_remove_from_selection = QtWidgets.QPushButton(self.centralwidget)
        self.bt_remove_from_selection.setObjectName("bt_remove_from_selection")
        self.horizontalLayout_6.addWidget(self.bt_remove_from_selection)
        self.bt_keep_annotated = QtWidgets.QPushButton(self.centralwidget)
        self.bt_keep_annotated.setObjectName("bt_keep_annotated")
        self.horizontalLayout_6.addWidget(self.bt_keep_annotated)
        self.bt_clear_selection = QtWidgets.QPushButton(self.centralwidget)
        self.bt_clear_selection.setObjectName("bt_clear_selection")
        self.horizontalLayout_6.addWidget(self.bt_clear_selection)
        self.bt_add_random = QtWidgets.QPushButton(self.centralwidget)
        self.bt_add_random.setObjectName("bt_add_random")
        self.horizontalLayout_6.addWidget(self.bt_add_random)
        self.sp_add_random_count = QtWidgets.QSpinBox(self.centralwidget)
        self.sp_add_random_count.setMaximum(10000)
        self.sp_add_random_count.setObjectName("sp_add_random_count")
        self.horizontalLayout_6.addWidget(self.sp_add_random_count)
        spacerItem1 = QtWidgets.QSpacerItem(20, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem1)
        self.bt_save_image_list = QtWidgets.QPushButton(self.centralwidget)
        self.bt_save_image_list.setObjectName("bt_save_image_list")
        self.horizontalLayout_6.addWidget(self.bt_save_image_list)
        self.le_selection_name = QtWidgets.QLineEdit(self.centralwidget)
        self.le_selection_name.setMaximumSize(QtCore.QSize(240, 16777215))
        self.le_selection_name.setObjectName("le_selection_name")
        self.horizontalLayout_6.addWidget(self.le_selection_name)
        self.cb_saved_batches = QtWidgets.QComboBox(self.centralwidget)
        self.cb_saved_batches.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cb_saved_batches.setObjectName("cb_saved_batches")
        self.cb_saved_batches.addItem("")
        self.horizontalLayout_6.addWidget(self.cb_saved_batches)
        self.bt_delete_saved_list = QtWidgets.QToolButton(self.centralwidget)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(":/annotation_level/resources/Delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_delete_saved_list.setIcon(icon1)
        self.bt_delete_saved_list.setObjectName("bt_delete_saved_list")
        self.horizontalLayout_6.addWidget(self.bt_delete_saved_list)
        spacerItem2 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_6.addItem(spacerItem2)
        self.verticalLayout_2.addLayout(self.horizontalLayout_6)
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setTabPosition(QtWidgets.QTabWidget.North)
        self.tabWidget.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_pipeline_builder = QtWidgets.QWidget()
        self.tab_pipeline_builder.setObjectName("tab_pipeline_builder")
        self.horizontalLayout_8 = QtWidgets.QHBoxLayout(self.tab_pipeline_builder)
        self.horizontalLayout_8.setObjectName("horizontalLayout_8")
        self.spl_ver_main = QtWidgets.QSplitter(self.tab_pipeline_builder)
        self.spl_ver_main.setOrientation(QtCore.Qt.Horizontal)
        self.spl_ver_main.setObjectName("spl_ver_main")
        self.frame_5 = QtWidgets.QFrame(self.spl_ver_main)
        self.frame_5.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_5.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_5.setLineWidth(1)
        self.frame_5.setObjectName("frame_5")
        self.horizontalLayout_7 = QtWidgets.QHBoxLayout(self.frame_5)
        self.horizontalLayout_7.setObjectName("horizontalLayout_7")
        self.spl_hor_main_left = QtWidgets.QSplitter(self.frame_5)
        self.spl_hor_main_left.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.spl_hor_main_left.setOrientation(QtCore.Qt.Vertical)
        self.spl_hor_main_left.setOpaqueResize(True)
        self.spl_hor_main_left.setObjectName("spl_hor_main_left")
        self.frame_4 = QtWidgets.QFrame(self.spl_hor_main_left)
        self.frame_4.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_4.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_4.setLineWidth(0)
        self.frame_4.setObjectName("frame_4")
        self.horizontalLayout_3 = QtWidgets.QHBoxLayout(self.frame_4)
        self.horizontalLayout_3.setObjectName("horizontalLayout_3")
        self.images_table = QtWidgets.QTableWidget(self.frame_4)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.images_table.sizePolicy().hasHeightForWidth())
        self.images_table.setSizePolicy(sizePolicy)
        self.images_table.setMinimumSize(QtCore.QSize(0, 100))
        self.images_table.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.images_table.setEditTriggers(QtWidgets.QAbstractItemView.NoEditTriggers)
        self.images_table.setDragDropOverwriteMode(False)
        self.images_table.setAlternatingRowColors(True)
        self.images_table.setSelectionMode(QtWidgets.QAbstractItemView.SingleSelection)
        self.images_table.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.images_table.setTextElideMode(QtCore.Qt.ElideMiddle)
        self.images_table.setGridStyle(QtCore.Qt.SolidLine)
        self.images_table.setObjectName("images_table")
        self.images_table.setColumnCount(9)
        self.images_table.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.images_table.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.images_table.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.images_table.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.images_table.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.images_table.setHorizontalHeaderItem(4, item)
        item = QtWidgets.QTableWidgetItem()
        self.images_table.setHorizontalHeaderItem(5, item)
        item = QtWidgets.QTableWidgetItem()
        self.images_table.setHorizontalHeaderItem(6, item)
        item = QtWidgets.QTableWidgetItem()
        self.images_table.setHorizontalHeaderItem(7, item)
        item = QtWidgets.QTableWidgetItem()
        self.images_table.setHorizontalHeaderItem(8, item)
        self.images_table.horizontalHeader().setDefaultSectionSize(70)
        self.images_table.horizontalHeader().setHighlightSections(False)
        self.images_table.horizontalHeader().setStretchLastSection(False)
        self.images_table.verticalHeader().setSortIndicatorShown(True)
        self.horizontalLayout_3.addWidget(self.images_table)
        self.frame_3 = QtWidgets.QFrame(self.spl_hor_main_left)
        self.frame_3.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_3.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_3.setObjectName("frame_3")
        self.horizontalLayout_2 = QtWidgets.QHBoxLayout(self.frame_3)
        self.horizontalLayout_2.setObjectName("horizontalLayout_2")
        self.spl_ver_main_tab_source = QtWidgets.QSplitter(self.frame_3)
        self.spl_ver_main_tab_source.setOrientation(QtCore.Qt.Horizontal)
        self.spl_ver_main_tab_source.setObjectName("spl_ver_main_tab_source")
        self.tw_tool_box = QtWidgets.QTabWidget(self.spl_ver_main_tab_source)
        self.tw_tool_box.setMinimumSize(QtCore.QSize(0, 0))
        self.tw_tool_box.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.tw_tool_box.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.tw_tool_box.setDocumentMode(False)
        self.tw_tool_box.setTabBarAutoHide(False)
        self.tw_tool_box.setObjectName("tw_tool_box")
        self.tb_tool_help = QtWidgets.QWidget()
        self.tb_tool_help.setObjectName("tb_tool_help")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.tb_tool_help)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.txtb_tool_help = QtWidgets.QTextBrowser(self.tb_tool_help)
        self.txtb_tool_help.setObjectName("txtb_tool_help")
        self.gridLayout_6.addWidget(self.txtb_tool_help, 0, 0, 1, 1)
        self.tw_tool_box.addTab(self.tb_tool_help, "")
        self.tb_annotations = QtWidgets.QWidget()
        self.tb_annotations.setObjectName("tb_annotations")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.tb_annotations)
        self.gridLayout_4.setObjectName("gridLayout_4")
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_4.addItem(spacerItem3, 1, 4, 1, 1)
        self.label_3 = QtWidgets.QLabel(self.tb_annotations)
        self.label_3.setObjectName("label_3")
        self.gridLayout_4.addWidget(self.label_3, 1, 0, 1, 1)
        self.bt_delete_annotation = QtWidgets.QToolButton(self.tb_annotations)
        self.bt_delete_annotation.setText("")
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(":/annotation_level/resources/Delete.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.bt_delete_annotation.setIcon(icon2)
        self.bt_delete_annotation.setIconSize(QtCore.QSize(24, 24))
        self.bt_delete_annotation.setObjectName("bt_delete_annotation")
        self.gridLayout_4.addWidget(self.bt_delete_annotation, 1, 5, 1, 1)
        self.cb_annotation_level = QtWidgets.QComboBox(self.tb_annotations)
        self.cb_annotation_level.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cb_annotation_level.setObjectName("cb_annotation_level")
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(":/annotation_level/resources/Info.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.cb_annotation_level.addItem(icon3, "")
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(":/annotation_level/resources/OK.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.cb_annotation_level.addItem(icon4, "")
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(":/annotation_level/resources/Warning.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.cb_annotation_level.addItem(icon5, "")
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(":/annotation_level/resources/Error.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.cb_annotation_level.addItem(icon6, "")
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(":/annotation_level/resources/Danger.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.cb_annotation_level.addItem(icon7, "")
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(":/annotation_level/resources/Problem.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.cb_annotation_level.addItem(icon8, "")
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(":/annotation_level/resources/Help.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.cb_annotation_level.addItem(icon9, "")
        self.gridLayout_4.addWidget(self.cb_annotation_level, 1, 1, 1, 1)
        self.te_annotations = QtWidgets.QTextEdit(self.tb_annotations)
        self.te_annotations.setObjectName("te_annotations")
        self.gridLayout_4.addWidget(self.te_annotations, 5, 0, 1, 6)
        self.tb_auto_annotation = QtWidgets.QTextBrowser(self.tb_annotations)
        self.tb_auto_annotation.setObjectName("tb_auto_annotation")
        self.gridLayout_4.addWidget(self.tb_auto_annotation, 9, 0, 1, 6)
        self.tw_tool_box.addTab(self.tb_annotations, "")
        self.tab = QtWidgets.QWidget()
        self.tab.setObjectName("tab")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.tab)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.scrollArea = QtWidgets.QScrollArea(self.tab)
        self.scrollArea.setWidgetResizable(True)
        self.scrollArea.setObjectName("scrollArea")
        self.scrollAreaWidgetContents_3 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_3.setGeometry(QtCore.QRect(0, 0, 799, 144))
        self.scrollAreaWidgetContents_3.setObjectName("scrollAreaWidgetContents_3")
        self.horizontalLayout_4 = QtWidgets.QHBoxLayout(self.scrollAreaWidgetContents_3)
        self.horizontalLayout_4.setObjectName("horizontalLayout_4")
        self.gl_grid_search_params = QtWidgets.QGridLayout()
        self.gl_grid_search_params.setObjectName("gl_grid_search_params")
        self.horizontalLayout_4.addLayout(self.gl_grid_search_params)
        self.scrollArea.setWidget(self.scrollAreaWidgetContents_3)
        self.gridLayout_2.addWidget(self.scrollArea, 0, 0, 1, 4)
        self.bt_update_grid_search = QtWidgets.QPushButton(self.tab)
        self.bt_update_grid_search.setObjectName("bt_update_grid_search")
        self.gridLayout_2.addWidget(self.bt_update_grid_search, 3, 0, 1, 1)
        self.bt_reset_grid_search = QtWidgets.QPushButton(self.tab)
        self.bt_reset_grid_search.setObjectName("bt_reset_grid_search")
        self.gridLayout_2.addWidget(self.bt_reset_grid_search, 3, 1, 1, 1)
        self.bt_run_grid_search = QtWidgets.QPushButton(self.tab)
        self.bt_run_grid_search.setObjectName("bt_run_grid_search")
        self.gridLayout_2.addWidget(self.bt_run_grid_search, 3, 3, 1, 1)
        self.chk_random_grid_search = QtWidgets.QCheckBox(self.tab)
        self.chk_random_grid_search.setObjectName("chk_random_grid_search")
        self.gridLayout_2.addWidget(self.chk_random_grid_search, 3, 2, 1, 1)
        self.tw_tool_box.addTab(self.tab, "")
        self.tb_last_batch = QtWidgets.QWidget()
        self.tb_last_batch.setObjectName("tb_last_batch")
        self.gridLayout_9 = QtWidgets.QGridLayout(self.tb_last_batch)
        self.gridLayout_9.setObjectName("gridLayout_9")
        self.txtb_last_batch = QtWidgets.QTextBrowser(self.tb_last_batch)
        self.txtb_last_batch.setObjectName("txtb_last_batch")
        self.gridLayout_9.addWidget(self.txtb_last_batch, 0, 0, 1, 5)
        self.bt_save_batch = QtWidgets.QPushButton(self.tb_last_batch)
        self.bt_save_batch.setObjectName("bt_save_batch")
        self.gridLayout_9.addWidget(self.bt_save_batch, 1, 2, 1, 1)
        self.bt_set_batch_as_selection = QtWidgets.QPushButton(self.tb_last_batch)
        self.bt_set_batch_as_selection.setObjectName("bt_set_batch_as_selection")
        self.gridLayout_9.addWidget(self.bt_set_batch_as_selection, 1, 0, 1, 1)
        self.le_batch_name = QtWidgets.QLineEdit(self.tb_last_batch)
        self.le_batch_name.setObjectName("le_batch_name")
        self.gridLayout_9.addWidget(self.le_batch_name, 1, 3, 1, 1)
        spacerItem4 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_9.addItem(spacerItem4, 1, 1, 1, 1)
        self.tw_tool_box.addTab(self.tb_last_batch, "")
        self.tb_tool_generated_code = QtWidgets.QWidget()
        self.tb_tool_generated_code.setObjectName("tb_tool_generated_code")
        self.gridLayout_7 = QtWidgets.QGridLayout(self.tb_tool_generated_code)
        self.gridLayout_7.setObjectName("gridLayout_7")
        self.txtb_code = QtWidgets.QTextBrowser(self.tb_tool_generated_code)
        self.txtb_code.setMaximumSize(QtCore.QSize(16777215, 16777215))
        self.txtb_code.setLineWrapMode(QtWidgets.QTextEdit.NoWrap)
        self.txtb_code.setObjectName("txtb_code")
        self.gridLayout_7.addWidget(self.txtb_code, 0, 0, 1, 2)
        self.tw_tool_box.addTab(self.tb_tool_generated_code, "")
        self.tb_statistics = QtWidgets.QWidget()
        self.tb_statistics.setObjectName("tb_statistics")
        self.gridLayout_8 = QtWidgets.QGridLayout(self.tb_statistics)
        self.gridLayout_8.setObjectName("gridLayout_8")
        self.bt_update_selection_stats = QtWidgets.QPushButton(self.tb_statistics)
        self.bt_update_selection_stats.setObjectName("bt_update_selection_stats")
        self.gridLayout_8.addWidget(self.bt_update_selection_stats, 1, 0, 1, 1)
        self.bt_clear_statistics = QtWidgets.QPushButton(self.tb_statistics)
        self.bt_clear_statistics.setObjectName("bt_clear_statistics")
        self.gridLayout_8.addWidget(self.bt_clear_statistics, 1, 2, 1, 1)
        self.lv_stats = QtWidgets.QTextBrowser(self.tb_statistics)
        font = QtGui.QFont()
        font.setFamily("Courier")
        self.lv_stats.setFont(font)
        self.lv_stats.setObjectName("lv_stats")
        self.gridLayout_8.addWidget(self.lv_stats, 0, 0, 1, 3)
        spacerItem5 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_8.addItem(spacerItem5, 1, 1, 1, 1)
        self.tw_tool_box.addTab(self.tb_statistics, "")
        self.horizontalLayout_2.addWidget(self.spl_ver_main_tab_source)
        self.frame_2 = QtWidgets.QFrame(self.spl_hor_main_left)
        self.frame_2.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame_2.setObjectName("frame_2")
        self.horizontalLayout = QtWidgets.QHBoxLayout(self.frame_2)
        self.horizontalLayout.setObjectName("horizontalLayout")
        self.gridLayout_16 = QtWidgets.QGridLayout()
        self.gridLayout_16.setObjectName("gridLayout_16")
        self.tb_tool_script = QtWidgets.QTabWidget(self.frame_2)
        self.tb_tool_script.setObjectName("tb_tool_script")
        self.tab_tools = QtWidgets.QWidget()
        self.tab_tools.setObjectName("tab_tools")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.tab_tools)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.bt_process_image = QtWidgets.QPushButton(self.tab_tools)
        self.bt_process_image.setText("")
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(":/image_process/resources/Play.png"), QtGui.QIcon.Normal, QtGui.QIcon.On)
        self.bt_process_image.setIcon(icon10)
        self.bt_process_image.setIconSize(QtCore.QSize(24, 24))
        self.bt_process_image.setDefault(True)
        self.bt_process_image.setObjectName("bt_process_image")
        self.gridLayout_3.addWidget(self.bt_process_image, 0, 6, 1, 1)
        self.bt_reset_op = QtWidgets.QPushButton(self.tab_tools)
        self.bt_reset_op.setText("")
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(":/common/resources/Refresh.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_reset_op.setIcon(icon11)
        self.bt_reset_op.setIconSize(QtCore.QSize(24, 24))
        self.bt_reset_op.setObjectName("bt_reset_op")
        self.gridLayout_3.addWidget(self.bt_reset_op, 0, 4, 1, 1)
        self.bt_select_tool = QtWidgets.QPushButton(self.tab_tools)
        self.bt_select_tool.setFlat(False)
        self.bt_select_tool.setObjectName("bt_select_tool")
        self.gridLayout_3.addWidget(self.bt_select_tool, 0, 1, 1, 1)
        self.scrollArea_2 = QtWidgets.QScrollArea(self.tab_tools)
        self.scrollArea_2.setFrameShape(QtWidgets.QFrame.HLine)
        self.scrollArea_2.setFrameShadow(QtWidgets.QFrame.Plain)
        self.scrollArea_2.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAsNeeded)
        self.scrollArea_2.setWidgetResizable(True)
        self.scrollArea_2.setObjectName("scrollArea_2")
        self.scrollAreaWidgetContents_4 = QtWidgets.QWidget()
        self.scrollAreaWidgetContents_4.setGeometry(QtCore.QRect(0, 0, 797, 70))
        self.scrollAreaWidgetContents_4.setObjectName("scrollAreaWidgetContents_4")
        self.gridLayout_17 = QtWidgets.QGridLayout(self.scrollAreaWidgetContents_4)
        self.gridLayout_17.setObjectName("gridLayout_17")
        self.gl_tool_params = QtWidgets.QGridLayout()
        self.gl_tool_params.setObjectName("gl_tool_params")
        self.gridLayout_17.addLayout(self.gl_tool_params, 0, 0, 1, 1)
        spacerItem6 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_17.addItem(spacerItem6, 1, 0, 1, 1)
        self.scrollArea_2.setWidget(self.scrollAreaWidgetContents_4)
        self.gridLayout_3.addWidget(self.scrollArea_2, 1, 0, 1, 7)
        self.chk_use_pipeline_as_preprocessor = QtWidgets.QCheckBox(self.tab_tools)
        self.chk_use_pipeline_as_preprocessor.setObjectName("chk_use_pipeline_as_preprocessor")
        self.gridLayout_3.addWidget(self.chk_use_pipeline_as_preprocessor, 0, 3, 1, 1)
        spacerItem7 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem7, 0, 2, 1, 1)
        self.tb_tool_script.addTab(self.tab_tools, "")
        self.tab_pipeline = QtWidgets.QWidget()
        self.tab_pipeline.setObjectName("tab_pipeline")
        self.gridLayout = QtWidgets.QGridLayout(self.tab_pipeline)
        self.gridLayout.setObjectName("gridLayout")
        self.bt_save_pipeline = QtWidgets.QPushButton(self.tab_pipeline)
        self.bt_save_pipeline.setText("")
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(":/common/resources/Save.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_save_pipeline.setIcon(icon12)
        self.bt_save_pipeline.setObjectName("bt_save_pipeline")
        self.gridLayout.addWidget(self.bt_save_pipeline, 0, 5, 1, 1)
        self.bt_clear_pipeline = QtWidgets.QPushButton(self.tab_pipeline)
        self.bt_clear_pipeline.setText("")
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(":/common/resources/New document.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_clear_pipeline.setIcon(icon13)
        self.bt_clear_pipeline.setObjectName("bt_clear_pipeline")
        self.gridLayout.addWidget(self.bt_clear_pipeline, 0, 3, 1, 1)
        self.bt_load_pipeline = QtWidgets.QPushButton(self.tab_pipeline)
        self.bt_load_pipeline.setText("")
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(":/common/resources/Load.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_load_pipeline.setIcon(icon14)
        self.bt_load_pipeline.setObjectName("bt_load_pipeline")
        self.gridLayout.addWidget(self.bt_load_pipeline, 0, 4, 1, 1)
        self.pb_script_gen_progress = QtWidgets.QProgressBar(self.tab_pipeline)
        self.pb_script_gen_progress.setMinimumSize(QtCore.QSize(200, 0))
        self.pb_script_gen_progress.setProperty("value", 0)
        self.pb_script_gen_progress.setTextVisible(True)
        self.pb_script_gen_progress.setTextDirection(QtWidgets.QProgressBar.BottomToTop)
        self.pb_script_gen_progress.setObjectName("pb_script_gen_progress")
        self.gridLayout.addWidget(self.pb_script_gen_progress, 0, 8, 1, 1)
        self.lbl_pipeline = QtWidgets.QLabel(self.tab_pipeline)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.lbl_pipeline.setFont(font)
        self.lbl_pipeline.setObjectName("lbl_pipeline")
        self.gridLayout.addWidget(self.lbl_pipeline, 0, 0, 1, 1)
        spacerItem8 = QtWidgets.QSpacerItem(22, 20, QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem8, 0, 6, 1, 1)
        self.bt_script_gen_run = QtWidgets.QToolButton(self.tab_pipeline)
        self.bt_script_gen_run.setText("")
        self.bt_script_gen_run.setIcon(icon10)
        self.bt_script_gen_run.setIconSize(QtCore.QSize(24, 24))
        self.bt_script_gen_run.setObjectName("bt_script_gen_run")
        self.gridLayout.addWidget(self.bt_script_gen_run, 0, 7, 1, 1)
        self.gl_pipeline_data = QtWidgets.QGridLayout()
        self.gl_pipeline_data.setObjectName("gl_pipeline_data")
        self.gridLayout.addLayout(self.gl_pipeline_data, 1, 0, 1, 9)
        self.lbl_pipeline_name = QtWidgets.QLabel(self.tab_pipeline)
        self.lbl_pipeline_name.setObjectName("lbl_pipeline_name")
        self.gridLayout.addWidget(self.lbl_pipeline_name, 0, 1, 1, 1)
        spacerItem9 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem9, 0, 2, 1, 1)
        self.tb_tool_script.addTab(self.tab_pipeline, "")
        self.tab_script = QtWidgets.QWidget()
        self.tab_script.setObjectName("tab_script")
        self.horizontalLayout_9 = QtWidgets.QHBoxLayout(self.tab_script)
        self.horizontalLayout_9.setObjectName("horizontalLayout_9")
        self.txtb_script = QtWidgets.QTextBrowser(self.tab_script)
        self.txtb_script.setObjectName("txtb_script")
        self.horizontalLayout_9.addWidget(self.txtb_script)
        self.tb_tool_script.addTab(self.tab_script, "")
        self.gridLayout_16.addWidget(self.tb_tool_script, 0, 0, 1, 4)
        self.label = QtWidgets.QLabel(self.frame_2)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.label.setFont(font)
        self.label.setAlignment(QtCore.Qt.AlignRight|QtCore.Qt.AlignTrailing|QtCore.Qt.AlignVCenter)
        self.label.setObjectName("label")
        self.gridLayout_16.addWidget(self.label, 1, 0, 1, 1)
        self.cb_batch_mode = QtWidgets.QComboBox(self.frame_2)
        self.cb_batch_mode.setMaximumSize(QtCore.QSize(200, 16777215))
        self.cb_batch_mode.setObjectName("cb_batch_mode")
        self.cb_batch_mode.addItem("")
        self.cb_batch_mode.addItem("")
        self.cb_batch_mode.addItem("")
        self.gridLayout_16.addWidget(self.cb_batch_mode, 1, 1, 1, 1)
        self.sb_batch_count = QtWidgets.QSpinBox(self.frame_2)
        self.sb_batch_count.setMaximumSize(QtCore.QSize(50, 16777215))
        self.sb_batch_count.setMaximum(62735)
        self.sb_batch_count.setObjectName("sb_batch_count")
        self.gridLayout_16.addWidget(self.sb_batch_count, 1, 2, 1, 1)
        self.bt_launch_batch = QtWidgets.QToolButton(self.frame_2)
        self.bt_launch_batch.setText("")
        self.bt_launch_batch.setIcon(icon10)
        self.bt_launch_batch.setIconSize(QtCore.QSize(24, 24))
        self.bt_launch_batch.setObjectName("bt_launch_batch")
        self.gridLayout_16.addWidget(self.bt_launch_batch, 1, 3, 1, 1)
        self.horizontalLayout.addLayout(self.gridLayout_16)
        self.horizontalLayout_7.addWidget(self.spl_hor_main_left)
        self.frame = QtWidgets.QFrame(self.spl_ver_main)
        self.frame.setFrameShape(QtWidgets.QFrame.NoFrame)
        self.frame.setFrameShadow(QtWidgets.QFrame.Plain)
        self.frame.setObjectName("frame")
        self.gridLayout_12 = QtWidgets.QGridLayout(self.frame)
        self.gridLayout_12.setObjectName("gridLayout_12")
        self.horizontalLayout_10 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_10.setObjectName("horizontalLayout_10")
        self.cb_available_outputs = QtWidgets.QComboBox(self.frame)
        self.cb_available_outputs.setMaxVisibleItems(30)
        self.cb_available_outputs.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
        self.cb_available_outputs.setObjectName("cb_available_outputs")
        self.horizontalLayout_10.addWidget(self.cb_available_outputs)
        self.bt_clear_result = QtWidgets.QPushButton(self.frame)
        self.bt_clear_result.setMaximumSize(QtCore.QSize(100, 16777215))
        self.bt_clear_result.setObjectName("bt_clear_result")
        self.horizontalLayout_10.addWidget(self.bt_clear_result)
        self.gridLayout_12.addLayout(self.horizontalLayout_10, 0, 0, 1, 1)
        self.spl_ver_main_img_data = QtWidgets.QSplitter(self.frame)
        self.spl_ver_main_img_data.setOrientation(QtCore.Qt.Horizontal)
        self.spl_ver_main_img_data.setObjectName("spl_ver_main_img_data")
        self.gridLayout_12.addWidget(self.spl_ver_main_img_data, 1, 0, 1, 1)
        self.horizontalLayout_8.addWidget(self.spl_ver_main)
        self.tabWidget.addTab(self.tab_pipeline_builder, "")
        self.tab_pipeline_processor = QtWidgets.QWidget()
        self.tab_pipeline_processor.setObjectName("tab_pipeline_processor")
        self.gridLayout_10 = QtWidgets.QGridLayout(self.tab_pipeline_processor)
        self.gridLayout_10.setObjectName("gridLayout_10")
        self.bt_pp_start = QtWidgets.QPushButton(self.tab_pipeline_processor)
        self.bt_pp_start.setMinimumSize(QtCore.QSize(100, 0))
        font = QtGui.QFont()
        font.setPointSize(16)
        font.setBold(True)
        font.setWeight(75)
        self.bt_pp_start.setFont(font)
        icon15 = QtGui.QIcon()
        icon15.addPixmap(QtGui.QPixmap(":/image_process/resources/Play.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pp_start.setIcon(icon15)
        self.bt_pp_start.setIconSize(QtCore.QSize(24, 24))
        self.bt_pp_start.setObjectName("bt_pp_start")
        self.gridLayout_10.addWidget(self.bt_pp_start, 3, 2, 1, 1)
        self.groupBox = QtWidgets.QGroupBox(self.tab_pipeline_processor)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox.sizePolicy().hasHeightForWidth())
        self.groupBox.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("groupBox")
        self.gridLayout_11 = QtWidgets.QGridLayout(self.groupBox)
        self.gridLayout_11.setObjectName("gridLayout_11")
        self.lbl_csv_file_name = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.lbl_csv_file_name.setFont(font)
        self.lbl_csv_file_name.setObjectName("lbl_csv_file_name")
        self.gridLayout_11.addWidget(self.lbl_csv_file_name, 1, 0, 1, 1)
        self.bt_pp_select_output_folder = QtWidgets.QToolButton(self.groupBox)
        icon16 = QtGui.QIcon()
        icon16.addPixmap(QtGui.QPixmap(":/common/resources/folder_blue.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pp_select_output_folder.setIcon(icon16)
        self.bt_pp_select_output_folder.setObjectName("bt_pp_select_output_folder")
        self.gridLayout_11.addWidget(self.bt_pp_select_output_folder, 0, 2, 1, 1)
        self.edt_csv_file_name = QtWidgets.QLineEdit(self.groupBox)
        self.edt_csv_file_name.setObjectName("edt_csv_file_name")
        self.gridLayout_11.addWidget(self.edt_csv_file_name, 1, 1, 1, 1)
        self.horizontalLayout_11 = QtWidgets.QHBoxLayout()
        self.horizontalLayout_11.setObjectName("horizontalLayout_11")
        self.cb_pp_generate_series_id = QtWidgets.QCheckBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.cb_pp_generate_series_id.sizePolicy().hasHeightForWidth())
        self.cb_pp_generate_series_id.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.cb_pp_generate_series_id.setFont(font)
        self.cb_pp_generate_series_id.setObjectName("cb_pp_generate_series_id")
        self.horizontalLayout_11.addWidget(self.cb_pp_generate_series_id)
        spacerItem10 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.horizontalLayout_11.addItem(spacerItem10)
        self.label_4 = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_4.sizePolicy().hasHeightForWidth())
        self.label_4.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_4.setFont(font)
        self.label_4.setObjectName("label_4")
        self.horizontalLayout_11.addWidget(self.label_4)
        self.sp_pp_time_delta = QtWidgets.QSpinBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.sp_pp_time_delta.sizePolicy().hasHeightForWidth())
        self.sp_pp_time_delta.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.sp_pp_time_delta.setFont(font)
        self.sp_pp_time_delta.setMaximum(10080)
        self.sp_pp_time_delta.setProperty("value", 20)
        self.sp_pp_time_delta.setObjectName("sp_pp_time_delta")
        self.horizontalLayout_11.addWidget(self.sp_pp_time_delta)
        self.label_5 = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_5.sizePolicy().hasHeightForWidth())
        self.label_5.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_5.setFont(font)
        self.label_5.setObjectName("label_5")
        self.horizontalLayout_11.addWidget(self.label_5)
        self.gridLayout_11.addLayout(self.horizontalLayout_11, 7, 0, 1, 3)
        self.label_9 = QtWidgets.QLabel(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.label_9.sizePolicy().hasHeightForWidth())
        self.label_9.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_9.setFont(font)
        self.label_9.setObjectName("label_9")
        self.gridLayout_11.addWidget(self.label_9, 8, 0, 1, 1)
        self.lb_pp_thread_count = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.lb_pp_thread_count.setFont(font)
        self.lb_pp_thread_count.setObjectName("lb_pp_thread_count")
        self.gridLayout_11.addWidget(self.lb_pp_thread_count, 8, 2, 1, 1)
        self.label_2 = QtWidgets.QLabel(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.gridLayout_11.addWidget(self.label_2, 0, 0, 1, 1)
        self.sl_pp_thread_count = QtWidgets.QSlider(self.groupBox)
        self.sl_pp_thread_count.setOrientation(QtCore.Qt.Horizontal)
        self.sl_pp_thread_count.setObjectName("sl_pp_thread_count")
        self.gridLayout_11.addWidget(self.sl_pp_thread_count, 8, 1, 1, 1)
        self.le_pp_output_folder = QtWidgets.QLineEdit(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.le_pp_output_folder.setFont(font)
        self.le_pp_output_folder.setReadOnly(True)
        self.le_pp_output_folder.setObjectName("le_pp_output_folder")
        self.gridLayout_11.addWidget(self.le_pp_output_folder, 0, 1, 1, 1)
        self.groupBox_2 = QtWidgets.QGroupBox(self.groupBox)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Preferred, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.groupBox_2.sizePolicy().hasHeightForWidth())
        self.groupBox_2.setSizePolicy(sizePolicy)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.groupBox_2.setFont(font)
        self.groupBox_2.setFlat(False)
        self.groupBox_2.setObjectName("groupBox_2")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.groupBox_2)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self.bt_pp_clear_script = QtWidgets.QToolButton(self.groupBox_2)
        self.bt_pp_clear_script.setIcon(icon1)
        self.bt_pp_clear_script.setObjectName("bt_pp_clear_script")
        self.gridLayout_5.addWidget(self.bt_pp_clear_script, 2, 3, 1, 1)
        self.rb_pp_active_script = QtWidgets.QRadioButton(self.groupBox_2)
        self.rb_pp_active_script.setObjectName("rb_pp_active_script")
        self.gridLayout_5.addWidget(self.rb_pp_active_script, 1, 0, 1, 4)
        self.rb_pp_default_process = QtWidgets.QRadioButton(self.groupBox_2)
        self.rb_pp_default_process.setObjectName("rb_pp_default_process")
        self.gridLayout_5.addWidget(self.rb_pp_default_process, 0, 0, 1, 4)
        self.rb_pp_load_script = QtWidgets.QRadioButton(self.groupBox_2)
        self.rb_pp_load_script.setObjectName("rb_pp_load_script")
        self.gridLayout_5.addWidget(self.rb_pp_load_script, 2, 0, 1, 1)
        self.le_pp_selected_pipeline = QtWidgets.QLineEdit(self.groupBox_2)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.le_pp_selected_pipeline.setFont(font)
        self.le_pp_selected_pipeline.setReadOnly(True)
        self.le_pp_selected_pipeline.setObjectName("le_pp_selected_pipeline")
        self.gridLayout_5.addWidget(self.le_pp_selected_pipeline, 2, 1, 1, 1)
        self.bt_pp_select_script = QtWidgets.QToolButton(self.groupBox_2)
        icon17 = QtGui.QIcon()
        icon17.addPixmap(QtGui.QPixmap(":/common/resources/List.png"), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.bt_pp_select_script.setIcon(icon17)
        self.bt_pp_select_script.setObjectName("bt_pp_select_script")
        self.gridLayout_5.addWidget(self.bt_pp_select_script, 2, 2, 1, 1)
        self.gridLayout_11.addWidget(self.groupBox_2, 5, 0, 1, 3)
        self.cb_pp_append_timestamp_to_output_folder = QtWidgets.QCheckBox(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.cb_pp_append_timestamp_to_output_folder.setFont(font)
        self.cb_pp_append_timestamp_to_output_folder.setObjectName("cb_pp_append_timestamp_to_output_folder")
        self.gridLayout_11.addWidget(self.cb_pp_append_timestamp_to_output_folder, 4, 0, 1, 3)
        self.cb_pp_append_experience_name = QtWidgets.QCheckBox(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.cb_pp_append_experience_name.setFont(font)
        self.cb_pp_append_experience_name.setObjectName("cb_pp_append_experience_name")
        self.gridLayout_11.addWidget(self.cb_pp_append_experience_name, 3, 0, 1, 3)
        self.cb_pp_overwrite = QtWidgets.QCheckBox(self.groupBox)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.cb_pp_overwrite.setFont(font)
        self.cb_pp_overwrite.setObjectName("cb_pp_overwrite")
        self.gridLayout_11.addWidget(self.cb_pp_overwrite, 2, 0, 1, 3)
        self.gridLayout_10.addWidget(self.groupBox, 0, 0, 1, 3)
        self.bt_pp_reset = QtWidgets.QPushButton(self.tab_pipeline_processor)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        self.bt_pp_reset.setFont(font)
        self.bt_pp_reset.setIcon(icon11)
        self.bt_pp_reset.setObjectName("bt_pp_reset")
        self.gridLayout_10.addWidget(self.bt_pp_reset, 3, 0, 1, 1)
        spacerItem11 = QtWidgets.QSpacerItem(944, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_10.addItem(spacerItem11, 3, 1, 1, 1)
        self.chk_pp_show_last_item = QtWidgets.QCheckBox(self.tab_pipeline_processor)
        self.chk_pp_show_last_item.setObjectName("chk_pp_show_last_item")
        self.gridLayout_10.addWidget(self.chk_pp_show_last_item, 1, 0, 1, 3)
        self.lbl_dummy = QtWidgets.QLabel(self.tab_pipeline_processor)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Ignored, QtWidgets.QSizePolicy.Ignored)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.lbl_dummy.sizePolicy().hasHeightForWidth())
        self.lbl_dummy.setSizePolicy(sizePolicy)
        self.lbl_dummy.setText("")
        self.lbl_dummy.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_dummy.setObjectName("lbl_dummy")
        self.gridLayout_10.addWidget(self.lbl_dummy, 2, 0, 1, 1)
        self.tabWidget.addTab(self.tab_pipeline_processor, "")
        self.tab_data_editor = QtWidgets.QWidget()
        self.tab_data_editor.setObjectName("tab_data_editor")
        self.gridLayout_13 = QtWidgets.QGridLayout(self.tab_data_editor)
        self.gridLayout_13.setObjectName("gridLayout_13")
        self.spl_de_left = QtWidgets.QSplitter(self.tab_data_editor)
        self.spl_de_left.setOrientation(QtCore.Qt.Horizontal)
        self.spl_de_left.setObjectName("spl_de_left")
        self.gv_de_image = QtWidgets.QGraphicsView(self.spl_de_left)
        self.gv_de_image.setObjectName("gv_de_image")
        self.spl_de_right = QtWidgets.QSplitter(self.spl_de_left)
        self.spl_de_right.setOrientation(QtCore.Qt.Horizontal)
        self.spl_de_right.setObjectName("spl_de_right")
        self.spl_de_hor = QtWidgets.QSplitter(self.spl_de_right)
        self.spl_de_hor.setOrientation(QtCore.Qt.Vertical)
        self.spl_de_hor.setObjectName("spl_de_hor")
        self.tb_ge_dataframe = QtWidgets.QTableView(self.spl_de_hor)
        self.tb_ge_dataframe.setObjectName("tb_ge_dataframe")
        self.txt_de_dataframe_info = QtWidgets.QTextBrowser(self.spl_de_hor)
        self.txt_de_dataframe_info.setObjectName("txt_de_dataframe_info")
        self.tv_de_column_info = QtWidgets.QTreeWidget(self.spl_de_right)
        self.tv_de_column_info.setObjectName("tv_de_column_info")
        self.tv_de_column_info.headerItem().setText(0, "1")
        self.gridLayout_13.addWidget(self.spl_de_left, 0, 0, 1, 1)
        self.tabWidget.addTab(self.tab_data_editor, "")
        self.verticalLayout_2.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1176, 21))
        self.menubar.setObjectName("menubar")
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        self.mnu_recent_parsed_folders = QtWidgets.QMenu(self.menuFile)
        self.mnu_recent_parsed_folders.setObjectName("mnu_recent_parsed_folders")
        self.mnu_connect_to_db = QtWidgets.QMenu(self.menuFile)
        self.mnu_connect_to_db.setObjectName("mnu_connect_to_db")
        self.menuView = QtWidgets.QMenu(self.menubar)
        self.menuView.setObjectName("menuView")
        self.menuVideo = QtWidgets.QMenu(self.menuView)
        self.menuVideo.setToolTip("")
        self.menuVideo.setToolTipsVisible(True)
        self.menuVideo.setObjectName("menuVideo")
        self.menuFrame_duration = QtWidgets.QMenu(self.menuVideo)
        self.menuFrame_duration.setObjectName("menuFrame_duration")
        self.menuResolution = QtWidgets.QMenu(self.menuVideo)
        self.menuResolution.setObjectName("menuResolution")
        self.menuAspect_ratio = QtWidgets.QMenu(self.menuVideo)
        self.menuAspect_ratio.setObjectName("menuAspect_ratio")
        self.menuBackground_color = QtWidgets.QMenu(self.menuVideo)
        self.menuBackground_color.setObjectName("menuBackground_color")
        self.menu_theme = QtWidgets.QMenu(self.menuView)
        self.menu_theme.setObjectName("menu_theme")
        self.menuCode_generation_mode = QtWidgets.QMenu(self.menuView)
        self.menuCode_generation_mode.setObjectName("menuCode_generation_mode")
        self.mnu_debug = QtWidgets.QMenu(self.menuView)
        self.mnu_debug.setObjectName("mnu_debug")
        self.menuScript_generator = QtWidgets.QMenu(self.menubar)
        self.menuScript_generator.setObjectName("menuScript_generator")
        self.mnu_tools_root = QtWidgets.QMenu(self.menubar)
        self.mnu_tools_root.setToolTipsVisible(True)
        self.mnu_tools_root.setObjectName("mnu_tools_root")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuView_2 = QtWidgets.QMenu(self.menubar)
        self.menuView_2.setObjectName("menuView_2")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        font = QtGui.QFont()
        font.setBold(True)
        font.setWeight(75)
        self.statusbar.setFont(font)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.dk_log = QtWidgets.QDockWidget(MainWindow)
        self.dk_log.setFeatures(QtWidgets.QDockWidget.AllDockWidgetFeatures)
        self.dk_log.setObjectName("dk_log")
        self.dockWidgetContents = QtWidgets.QWidget()
        self.dockWidgetContents.setObjectName("dockWidgetContents")
        self.horizontalLayout_12 = QtWidgets.QHBoxLayout(self.dockWidgetContents)
        self.horizontalLayout_12.setObjectName("horizontalLayout_12")
        self.lv_log = QtWidgets.QTextBrowser(self.dockWidgetContents)
        self.lv_log.setObjectName("lv_log")
        self.horizontalLayout_12.addWidget(self.lv_log)
        self.dk_log.setWidget(self.dockWidgetContents)
        MainWindow.addDockWidget(QtCore.Qt.DockWidgetArea(8), self.dk_log)
        self.actionTPMP = QtWidgets.QAction(MainWindow)
        self.actionTPMP.setCheckable(False)
        self.actionTPMP.setChecked(False)
        self.actionTPMP.setObjectName("actionTPMP")
        self.actionTPMP_sample = QtWidgets.QAction(MainWindow)
        self.actionTPMP_sample.setCheckable(False)
        self.actionTPMP_sample.setObjectName("actionTPMP_sample")
        self.action_switch_db_new = QtWidgets.QAction(MainWindow)
        self.action_switch_db_new.setCheckable(False)
        self.action_switch_db_new.setObjectName("action_switch_db_new")
        self.actionSelect = QtWidgets.QAction(MainWindow)
        self.actionSelect.setObjectName("actionSelect")
        self.actionExit = QtWidgets.QAction(MainWindow)
        self.actionExit.setObjectName("actionExit")
        self.actionEnable_annotations = QtWidgets.QAction(MainWindow)
        self.actionEnable_annotations.setCheckable(True)
        self.actionEnable_annotations.setObjectName("actionEnable_annotations")
        self.actionEnable_log = QtWidgets.QAction(MainWindow)
        self.actionEnable_log.setCheckable(True)
        self.actionEnable_log.setChecked(True)
        self.actionEnable_log.setObjectName("actionEnable_log")
        self.actionSave_selected_image = QtWidgets.QAction(MainWindow)
        self.actionSave_selected_image.setObjectName("actionSave_selected_image")
        self.actionSave_all_images = QtWidgets.QAction(MainWindow)
        self.actionSave_all_images.setObjectName("actionSave_all_images")
        self.action_parse_folder = QtWidgets.QAction(MainWindow)
        self.action_parse_folder.setObjectName("action_parse_folder")
        self.actionAdd_channel_mask = QtWidgets.QAction(MainWindow)
        self.actionAdd_channel_mask.setObjectName("actionAdd_channel_mask")
        self.actionAdd_white_balance_fixer = QtWidgets.QAction(MainWindow)
        self.actionAdd_white_balance_fixer.setObjectName("actionAdd_white_balance_fixer")
        self.action_script_merge_select_and = QtWidgets.QAction(MainWindow)
        self.action_script_merge_select_and.setCheckable(True)
        self.action_script_merge_select_and.setChecked(True)
        self.action_script_merge_select_and.setObjectName("action_script_merge_select_and")
        self.action_script_merge_select_or = QtWidgets.QAction(MainWindow)
        self.action_script_merge_select_or.setCheckable(True)
        self.action_script_merge_select_or.setObjectName("action_script_merge_select_or")
        self.actionSet_contour_cleaner = QtWidgets.QAction(MainWindow)
        self.actionSet_contour_cleaner.setObjectName("actionSet_contour_cleaner")
        self.actionDisplay_images = QtWidgets.QAction(MainWindow)
        self.actionDisplay_images.setCheckable(True)
        self.actionDisplay_images.setChecked(True)
        self.actionDisplay_images.setObjectName("actionDisplay_images")
        self.actionUse_file_name = QtWidgets.QAction(MainWindow)
        self.actionUse_file_name.setCheckable(True)
        self.actionUse_file_name.setChecked(True)
        self.actionUse_file_name.setObjectName("actionUse_file_name")
        self.action_data_output_none = QtWidgets.QAction(MainWindow)
        self.action_data_output_none.setCheckable(True)
        self.action_data_output_none.setObjectName("action_data_output_none")
        self.action_data_output_stdio = QtWidgets.QAction(MainWindow)
        self.action_data_output_stdio.setCheckable(True)
        self.action_data_output_stdio.setObjectName("action_data_output_stdio")
        self.action_data_output_file = QtWidgets.QAction(MainWindow)
        self.action_data_output_file.setCheckable(True)
        self.action_data_output_file.setObjectName("action_data_output_file")
        self.action_execute_script = QtWidgets.QAction(MainWindow)
        self.action_execute_script.setObjectName("action_execute_script")
        self.actionAll = QtWidgets.QAction(MainWindow)
        self.actionAll.setObjectName("actionAll")
        self.actionNone = QtWidgets.QAction(MainWindow)
        self.actionNone.setObjectName("actionNone")
        self.action_build_video_from_images = QtWidgets.QAction(MainWindow)
        self.action_build_video_from_images.setObjectName("action_build_video_from_images")
        self.action_new_script = QtWidgets.QAction(MainWindow)
        self.action_new_script.setIcon(icon13)
        self.action_new_script.setObjectName("action_new_script")
        self.action_load_script = QtWidgets.QAction(MainWindow)
        self.action_load_script.setIcon(icon14)
        self.action_load_script.setObjectName("action_load_script")
        self.action_save_script = QtWidgets.QAction(MainWindow)
        self.action_save_script.setIcon(icon12)
        self.action_save_script.setObjectName("action_save_script")
        self.action_add_roi_execute_after_pre_processing = QtWidgets.QAction(MainWindow)
        self.action_add_roi_execute_after_pre_processing.setObjectName("action_add_roi_execute_after_pre_processing")
        self.action_roi_execute_before_pre_processing = QtWidgets.QAction(MainWindow)
        self.action_roi_execute_before_pre_processing.setObjectName("action_roi_execute_before_pre_processing")
        self.action_roi_execute_after_pre_processing = QtWidgets.QAction(MainWindow)
        self.action_roi_execute_after_pre_processing.setObjectName("action_roi_execute_after_pre_processing")
        self.action_roi_execute_after_mask_merger = QtWidgets.QAction(MainWindow)
        self.action_roi_execute_after_mask_merger.setObjectName("action_roi_execute_after_mask_merger")
        self.act_view_anno_all = QtWidgets.QAction(MainWindow)
        self.act_view_anno_all.setObjectName("act_view_anno_all")
        self.act_view_anno_none = QtWidgets.QAction(MainWindow)
        self.act_view_anno_none.setObjectName("act_view_anno_none")
        self.act_view_anno_empty = QtWidgets.QAction(MainWindow)
        self.act_view_anno_empty.setCheckable(True)
        self.act_view_anno_empty.setChecked(True)
        self.act_view_anno_empty.setObjectName("act_view_anno_empty")
        self.act_view_anno_info = QtWidgets.QAction(MainWindow)
        self.act_view_anno_info.setCheckable(True)
        self.act_view_anno_info.setChecked(True)
        self.act_view_anno_info.setObjectName("act_view_anno_info")
        self.act_view_anno_ok = QtWidgets.QAction(MainWindow)
        self.act_view_anno_ok.setCheckable(True)
        self.act_view_anno_ok.setChecked(True)
        self.act_view_anno_ok.setObjectName("act_view_anno_ok")
        self.act_view_anno_warning = QtWidgets.QAction(MainWindow)
        self.act_view_anno_warning.setCheckable(True)
        self.act_view_anno_warning.setChecked(True)
        self.act_view_anno_warning.setObjectName("act_view_anno_warning")
        self.act_view_anno_error = QtWidgets.QAction(MainWindow)
        self.act_view_anno_error.setCheckable(True)
        self.act_view_anno_error.setChecked(True)
        self.act_view_anno_error.setObjectName("act_view_anno_error")
        self.act_view_anno_critical = QtWidgets.QAction(MainWindow)
        self.act_view_anno_critical.setCheckable(True)
        self.act_view_anno_critical.setChecked(True)
        self.act_view_anno_critical.setObjectName("act_view_anno_critical")
        self.act_view_anno_source_issue = QtWidgets.QAction(MainWindow)
        self.act_view_anno_source_issue.setCheckable(True)
        self.act_view_anno_source_issue.setChecked(True)
        self.act_view_anno_source_issue.setObjectName("act_view_anno_source_issue")
        self.act_view_anno_unknown = QtWidgets.QAction(MainWindow)
        self.act_view_anno_unknown.setCheckable(True)
        self.act_view_anno_unknown.setChecked(True)
        self.act_view_anno_unknown.setObjectName("act_view_anno_unknown")
        self.action_save_as_python_script = QtWidgets.QAction(MainWindow)
        self.action_save_as_python_script.setObjectName("action_save_as_python_script")
        self.actionMerge_script_and_toolbox_panels = QtWidgets.QAction(MainWindow)
        self.actionMerge_script_and_toolbox_panels.setObjectName("actionMerge_script_and_toolbox_panels")
        self.actionPut_tools_widgets_in_scroll_panel = QtWidgets.QAction(MainWindow)
        self.actionPut_tools_widgets_in_scroll_panel.setObjectName("actionPut_tools_widgets_in_scroll_panel")
        self.action_add_roi = QtWidgets.QAction(MainWindow)
        self.action_add_roi.setObjectName("action_add_roi")
        self.actionAdd_auto_fill_in_grid_search = QtWidgets.QAction(MainWindow)
        self.actionAdd_auto_fill_in_grid_search.setObjectName("actionAdd_auto_fill_in_grid_search")
        self.actionAdd_buttons_to_add_tool_to_script_next_to_reset_button = QtWidgets.QAction(MainWindow)
        self.actionAdd_buttons_to_add_tool_to_script_next_to_reset_button.setObjectName("actionAdd_buttons_to_add_tool_to_script_next_to_reset_button")
        self.actionAdd_roi_to_check_mask_positioning = QtWidgets.QAction(MainWindow)
        self.actionAdd_roi_to_check_mask_positioning.setObjectName("actionAdd_roi_to_check_mask_positioning")
        self.actionFix_ROI_display_color_issue_foRectangleRegions = QtWidgets.QAction(MainWindow)
        self.actionFix_ROI_display_color_issue_foRectangleRegions.setObjectName("actionFix_ROI_display_color_issue_foRectangleRegions")
        self.actionAdd_more_colors_for_ROI = QtWidgets.QAction(MainWindow)
        self.actionAdd_more_colors_for_ROI.setObjectName("actionAdd_more_colors_for_ROI")
        self.action_create_wrapper_before = QtWidgets.QAction(MainWindow)
        self.action_create_wrapper_before.setCheckable(True)
        self.action_create_wrapper_before.setObjectName("action_create_wrapper_before")
        self.action_standard_object_oriented_call = QtWidgets.QAction(MainWindow)
        self.action_standard_object_oriented_call.setCheckable(True)
        self.action_standard_object_oriented_call.setObjectName("action_standard_object_oriented_call")
        self.action_object_oriented_wrapped_with_a_with_clause = QtWidgets.QAction(MainWindow)
        self.action_object_oriented_wrapped_with_a_with_clause.setCheckable(True)
        self.action_object_oriented_wrapped_with_a_with_clause.setChecked(False)
        self.action_object_oriented_wrapped_with_a_with_clause.setObjectName("action_object_oriented_wrapped_with_a_with_clause")
        self.action_functional_style = QtWidgets.QAction(MainWindow)
        self.action_functional_style.setCheckable(True)
        self.action_functional_style.setChecked(True)
        self.action_functional_style.setEnabled(True)
        self.action_functional_style.setObjectName("action_functional_style")
        self.action_video_1_second = QtWidgets.QAction(MainWindow)
        self.action_video_1_second.setCheckable(True)
        self.action_video_1_second.setChecked(True)
        self.action_video_1_second.setObjectName("action_video_1_second")
        self.action_video_1_24_second = QtWidgets.QAction(MainWindow)
        self.action_video_1_24_second.setCheckable(True)
        self.action_video_1_24_second.setChecked(False)
        self.action_video_1_24_second.setObjectName("action_video_1_24_second")
        self.action_video_5_second = QtWidgets.QAction(MainWindow)
        self.action_video_5_second.setCheckable(True)
        self.action_video_5_second.setObjectName("action_video_5_second")
        self.action_video_stack_and_jitter = QtWidgets.QAction(MainWindow)
        self.action_video_stack_and_jitter.setCheckable(True)
        self.action_video_stack_and_jitter.setChecked(False)
        self.action_video_stack_and_jitter.setObjectName("action_video_stack_and_jitter")
        self.action_video_half_second = QtWidgets.QAction(MainWindow)
        self.action_video_half_second.setCheckable(True)
        self.action_video_half_second.setObjectName("action_video_half_second")
        self.action_video_res_first_image = QtWidgets.QAction(MainWindow)
        self.action_video_res_first_image.setCheckable(True)
        self.action_video_res_first_image.setChecked(True)
        self.action_video_res_first_image.setObjectName("action_video_res_first_image")
        self.action_video_res_1080p = QtWidgets.QAction(MainWindow)
        self.action_video_res_1080p.setCheckable(True)
        self.action_video_res_1080p.setObjectName("action_video_res_1080p")
        self.action_video_res_720p = QtWidgets.QAction(MainWindow)
        self.action_video_res_720p.setCheckable(True)
        self.action_video_res_720p.setObjectName("action_video_res_720p")
        self.action_video_res_576p = QtWidgets.QAction(MainWindow)
        self.action_video_res_576p.setCheckable(True)
        self.action_video_res_576p.setObjectName("action_video_res_576p")
        self.action_video_res_480p = QtWidgets.QAction(MainWindow)
        self.action_video_res_480p.setCheckable(True)
        self.action_video_res_480p.setObjectName("action_video_res_480p")
        self.action_video_res_376p = QtWidgets.QAction(MainWindow)
        self.action_video_res_376p.setCheckable(True)
        self.action_video_res_376p.setObjectName("action_video_res_376p")
        self.action_video_res_240p = QtWidgets.QAction(MainWindow)
        self.action_video_res_240p.setCheckable(True)
        self.action_video_res_240p.setObjectName("action_video_res_240p")
        self.action_video_ar_16_9 = QtWidgets.QAction(MainWindow)
        self.action_video_ar_16_9.setCheckable(True)
        self.action_video_ar_16_9.setChecked(True)
        self.action_video_ar_16_9.setObjectName("action_video_ar_16_9")
        self.action_video_ar_4_3 = QtWidgets.QAction(MainWindow)
        self.action_video_ar_4_3.setCheckable(True)
        self.action_video_ar_4_3.setObjectName("action_video_ar_4_3")
        self.action_video_ar_1_1 = QtWidgets.QAction(MainWindow)
        self.action_video_ar_1_1.setCheckable(True)
        self.action_video_ar_1_1.setObjectName("action_video_ar_1_1")
        self.action_video_bkg_color_black = QtWidgets.QAction(MainWindow)
        self.action_video_bkg_color_black.setCheckable(True)
        self.action_video_bkg_color_black.setChecked(True)
        self.action_video_bkg_color_black.setObjectName("action_video_bkg_color_black")
        self.action_video_bkg_color_white = QtWidgets.QAction(MainWindow)
        self.action_video_bkg_color_white.setCheckable(True)
        self.action_video_bkg_color_white.setObjectName("action_video_bkg_color_white")
        self.action_video_bkg_color_silver = QtWidgets.QAction(MainWindow)
        self.action_video_bkg_color_silver.setCheckable(True)
        self.action_video_bkg_color_silver.setObjectName("action_video_bkg_color_silver")
        self.act_parse_folder_memory = QtWidgets.QAction(MainWindow)
        self.act_parse_folder_memory.setObjectName("act_parse_folder_memory")
        self.act_clean_parsed_folders = QtWidgets.QAction(MainWindow)
        self.act_clean_parsed_folders.setObjectName("act_clean_parsed_folders")
        self.actionplace_holder = QtWidgets.QAction(MainWindow)
        self.actionplace_holder.setObjectName("actionplace_holder")
        self.actionplace_holder_2 = QtWidgets.QAction(MainWindow)
        self.actionplace_holder_2.setObjectName("actionplace_holder_2")
        self.action_add_exposure_fixer = QtWidgets.QAction(MainWindow)
        self.action_add_exposure_fixer.setObjectName("action_add_exposure_fixer")
        self.action_add_feature_extractor = QtWidgets.QAction(MainWindow)
        self.action_add_feature_extractor.setObjectName("action_add_feature_extractor")
        self.action_about_form = QtWidgets.QAction(MainWindow)
        self.action_about_form.setObjectName("action_about_form")
        self.action_show_documentation = QtWidgets.QAction(MainWindow)
        self.action_show_documentation.setObjectName("action_show_documentation")
        self.action_use_dark_theme = QtWidgets.QAction(MainWindow)
        self.action_use_dark_theme.setCheckable(True)
        self.action_use_dark_theme.setChecked(True)
        self.action_use_dark_theme.setObjectName("action_use_dark_theme")
        self.action_build_tool_documentation = QtWidgets.QAction(MainWindow)
        self.action_build_tool_documentation.setObjectName("action_build_tool_documentation")
        self.action_build_ipso_phen_documentation = QtWidgets.QAction(MainWindow)
        self.action_build_ipso_phen_documentation.setObjectName("action_build_ipso_phen_documentation")
        self.action_show_read_me = QtWidgets.QAction(MainWindow)
        self.action_show_read_me.setObjectName("action_show_read_me")
        self.action_build_missing_tools_documentation = QtWidgets.QAction(MainWindow)
        self.action_build_missing_tools_documentation.setObjectName("action_build_missing_tools_documentation")
        self.action_new_tool = QtWidgets.QAction(MainWindow)
        self.action_new_tool.setObjectName("action_new_tool")
        self.action_use_multithreading = QtWidgets.QAction(MainWindow)
        self.action_use_multithreading.setCheckable(True)
        self.action_use_multithreading.setChecked(True)
        self.action_use_multithreading.setObjectName("action_use_multithreading")
        self.action_use_pipeline_cache = QtWidgets.QAction(MainWindow)
        self.action_use_pipeline_cache.setCheckable(True)
        self.action_use_pipeline_cache.setChecked(True)
        self.action_use_pipeline_cache.setObjectName("action_use_pipeline_cache")
        self.action_show_log = QtWidgets.QAction(MainWindow)
        self.action_show_log.setCheckable(True)
        self.action_show_log.setChecked(True)
        self.action_show_log.setObjectName("action_show_log")
        self.mnu_recent_parsed_folders.addAction(self.act_clean_parsed_folders)
        self.menuFile.addAction(self.act_parse_folder_memory)
        self.menuFile.addAction(self.mnu_recent_parsed_folders.menuAction())
        self.menuFile.addAction(self.mnu_connect_to_db.menuAction())
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSave_selected_image)
        self.menuFile.addAction(self.actionSave_all_images)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.action_build_video_from_images)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.action_new_tool)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuFrame_duration.addAction(self.action_video_1_24_second)
        self.menuFrame_duration.addAction(self.action_video_half_second)
        self.menuFrame_duration.addAction(self.action_video_1_second)
        self.menuFrame_duration.addAction(self.action_video_5_second)
        self.menuResolution.addAction(self.action_video_res_first_image)
        self.menuResolution.addAction(self.action_video_res_1080p)
        self.menuResolution.addAction(self.action_video_res_720p)
        self.menuResolution.addAction(self.action_video_res_576p)
        self.menuResolution.addAction(self.action_video_res_480p)
        self.menuResolution.addAction(self.action_video_res_376p)
        self.menuResolution.addAction(self.action_video_res_240p)
        self.menuAspect_ratio.addAction(self.action_video_ar_16_9)
        self.menuAspect_ratio.addAction(self.action_video_ar_4_3)
        self.menuAspect_ratio.addAction(self.action_video_ar_1_1)
        self.menuBackground_color.addAction(self.action_video_bkg_color_black)
        self.menuBackground_color.addAction(self.action_video_bkg_color_white)
        self.menuBackground_color.addAction(self.action_video_bkg_color_silver)
        self.menuVideo.addAction(self.menuResolution.menuAction())
        self.menuVideo.addAction(self.menuAspect_ratio.menuAction())
        self.menuVideo.addAction(self.menuBackground_color.menuAction())
        self.menuVideo.addAction(self.menuFrame_duration.menuAction())
        self.menuVideo.addAction(self.action_video_stack_and_jitter)
        self.menuCode_generation_mode.addAction(self.action_create_wrapper_before)
        self.menuCode_generation_mode.addSeparator()
        self.menuCode_generation_mode.addAction(self.action_functional_style)
        self.menuCode_generation_mode.addAction(self.action_object_oriented_wrapped_with_a_with_clause)
        self.menuCode_generation_mode.addAction(self.action_standard_object_oriented_call)
        self.mnu_debug.addAction(self.action_use_multithreading)
        self.mnu_debug.addAction(self.action_use_pipeline_cache)
        self.menuView.addAction(self.actionEnable_annotations)
        self.menuView.addAction(self.actionEnable_log)
        self.menuView.addAction(self.menuVideo.menuAction())
        self.menuView.addAction(self.menu_theme.menuAction())
        self.menuView.addSeparator()
        self.menuView.addAction(self.menuCode_generation_mode.menuAction())
        self.menuView.addSeparator()
        self.menuView.addAction(self.mnu_debug.menuAction())
        self.menuScript_generator.addAction(self.action_new_script)
        self.menuScript_generator.addAction(self.action_load_script)
        self.menuScript_generator.addAction(self.action_save_script)
        self.menuScript_generator.addAction(self.action_save_as_python_script)
        self.menuScript_generator.addSeparator()
        self.menuScript_generator.addAction(self.action_add_exposure_fixer)
        self.menuScript_generator.addAction(self.actionAdd_white_balance_fixer)
        self.menuScript_generator.addAction(self.actionAdd_channel_mask)
        self.menuScript_generator.addAction(self.action_add_roi)
        self.menuScript_generator.addAction(self.actionSet_contour_cleaner)
        self.menuScript_generator.addAction(self.action_add_feature_extractor)
        self.menuHelp.addAction(self.action_show_read_me)
        self.menuHelp.addAction(self.action_show_documentation)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.action_build_tool_documentation)
        self.menuHelp.addAction(self.action_build_ipso_phen_documentation)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.action_about_form)
        self.menuView_2.addAction(self.action_show_log)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.mnu_tools_root.menuAction())
        self.menubar.addAction(self.menuScript_generator.menuAction())
        self.menubar.addAction(self.menuView_2.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        self.tw_tool_box.setCurrentIndex(1)
        self.tb_tool_script.setCurrentIndex(0)
        self.bt_clear_statistics.clicked.connect(self.lv_stats.clear)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "<b>IPSO</b>"))
        self.chk_experiment.setText(_translate("MainWindow", "Experiment:"))
        self.chk_plant.setText(_translate("MainWindow", "Plant:"))
        self.chk_date.setText(_translate("MainWindow", "Date:"))
        self.chk_camera.setText(_translate("MainWindow", "Camera:"))
        self.chk_view_option.setText(_translate("MainWindow", "View option:"))
        self.chk_time.setText(_translate("MainWindow", "Time:"))
        self.lbl_selection.setText(_translate("MainWindow", "Selection:"))
        self.bt_add_to_selection.setText(_translate("MainWindow", "Add"))
        self.bt_remove_from_selection.setText(_translate("MainWindow", "Remove"))
        self.bt_keep_annotated.setText(_translate("MainWindow", "Keep tagged"))
        self.bt_clear_selection.setText(_translate("MainWindow", "Clear"))
        self.bt_add_random.setText(_translate("MainWindow", "Add random"))
        self.bt_save_image_list.setText(_translate("MainWindow", "Save as:"))
        self.cb_saved_batches.setItemText(0, _translate("MainWindow", "-------------------"))
        self.bt_delete_saved_list.setText(_translate("MainWindow", "..."))
        self.images_table.setSortingEnabled(True)
        item = self.images_table.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "Experiment"))
        item = self.images_table.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "Plant"))
        item = self.images_table.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Date"))
        item = self.images_table.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Camera"))
        item = self.images_table.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "View option"))
        item = self.images_table.horizontalHeaderItem(5)
        item.setText(_translate("MainWindow", "Time"))
        item = self.images_table.horizontalHeaderItem(6)
        item.setText(_translate("MainWindow", "date_time"))
        item = self.images_table.horizontalHeaderItem(7)
        item.setText(_translate("MainWindow", "Path"))
        item = self.images_table.horizontalHeaderItem(8)
        item.setText(_translate("MainWindow", "Luid"))
        self.tw_tool_box.setTabText(self.tw_tool_box.indexOf(self.tb_tool_help), _translate("MainWindow", "Help"))
        self.label_3.setText(_translate("MainWindow", "Annotation level:"))
        self.cb_annotation_level.setItemText(0, _translate("MainWindow", "Info"))
        self.cb_annotation_level.setItemText(1, _translate("MainWindow", "OK"))
        self.cb_annotation_level.setItemText(2, _translate("MainWindow", "Warning"))
        self.cb_annotation_level.setItemText(3, _translate("MainWindow", "Error"))
        self.cb_annotation_level.setItemText(4, _translate("MainWindow", "Critical"))
        self.cb_annotation_level.setItemText(5, _translate("MainWindow", "Source issue"))
        self.cb_annotation_level.setItemText(6, _translate("MainWindow", "Unknown"))
        self.tw_tool_box.setTabText(self.tw_tool_box.indexOf(self.tb_annotations), _translate("MainWindow", "Annotations"))
        self.bt_update_grid_search.setText(_translate("MainWindow", "Update"))
        self.bt_reset_grid_search.setText(_translate("MainWindow", "Reset"))
        self.bt_run_grid_search.setText(_translate("MainWindow", "Run grid search"))
        self.chk_random_grid_search.setToolTip(_translate("MainWindow", "Run grid search in random order"))
        self.chk_random_grid_search.setText(_translate("MainWindow", "Random"))
        self.tw_tool_box.setTabText(self.tw_tool_box.indexOf(self.tab), _translate("MainWindow", "Grid search"))
        self.bt_save_batch.setText(_translate("MainWindow", "Save batch"))
        self.bt_set_batch_as_selection.setText(_translate("MainWindow", "Set as selection"))
        self.tw_tool_box.setTabText(self.tw_tool_box.indexOf(self.tb_last_batch), _translate("MainWindow", "Last batch"))
        self.tw_tool_box.setTabText(self.tw_tool_box.indexOf(self.tb_tool_generated_code), _translate("MainWindow", "Code"))
        self.bt_update_selection_stats.setText(_translate("MainWindow", "Build selection statistics"))
        self.bt_clear_statistics.setText(_translate("MainWindow", "Clear"))
        self.tw_tool_box.setTabText(self.tw_tool_box.indexOf(self.tb_statistics), _translate("MainWindow", "Statistics"))
        self.bt_select_tool.setText(_translate("MainWindow", "Selected tool: "))
        self.chk_use_pipeline_as_preprocessor.setText(_translate("MainWindow", "Use pipeline as preprocessor"))
        self.tb_tool_script.setTabText(self.tb_tool_script.indexOf(self.tab_tools), _translate("MainWindow", "Tools"))
        self.bt_save_pipeline.setToolTip(_translate("MainWindow", "Save script..."))
        self.bt_clear_pipeline.setToolTip(_translate("MainWindow", "New script"))
        self.bt_load_pipeline.setToolTip(_translate("MainWindow", "Load script..."))
        self.lbl_pipeline.setText(_translate("MainWindow", "Pipeline:"))
        self.lbl_pipeline_name.setText(_translate("MainWindow", "T"))
        self.tb_tool_script.setTabText(self.tb_tool_script.indexOf(self.tab_pipeline), _translate("MainWindow", "Pipeline"))
        self.tb_tool_script.setTabText(self.tb_tool_script.indexOf(self.tab_script), _translate("MainWindow", "Script"))
        self.label.setText(_translate("MainWindow", "Batch process:"))
        self.cb_batch_mode.setItemText(0, _translate("MainWindow", "All"))
        self.cb_batch_mode.setItemText(1, _translate("MainWindow", "First n"))
        self.cb_batch_mode.setItemText(2, _translate("MainWindow", "Random n"))
        self.bt_clear_result.setText(_translate("MainWindow", "Clear"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_pipeline_builder), _translate("MainWindow", "Pipeline builder"))
        self.bt_pp_start.setText(_translate("MainWindow", "Start"))
        self.groupBox.setTitle(_translate("MainWindow", "Pipeline processor options:"))
        self.lbl_csv_file_name.setText(_translate("MainWindow", "CSV file name:"))
        self.bt_pp_select_output_folder.setText(_translate("MainWindow", "..."))
        self.cb_pp_generate_series_id.setText(_translate("MainWindow", "Generate series id"))
        self.label_4.setText(_translate("MainWindow", "max delta from first image in series:"))
        self.label_5.setText(_translate("MainWindow", "minutes"))
        self.label_9.setText(_translate("MainWindow", "Thread count:"))
        self.lb_pp_thread_count.setText(_translate("MainWindow", "0"))
        self.label_2.setText(_translate("MainWindow", "Output folder:"))
        self.groupBox_2.setTitle(_translate("MainWindow", "Pipeline:"))
        self.bt_pp_clear_script.setText(_translate("MainWindow", "..."))
        self.rb_pp_active_script.setText(_translate("MainWindow", "Active script"))
        self.rb_pp_default_process.setText(_translate("MainWindow", "Default process"))
        self.rb_pp_load_script.setText(_translate("MainWindow", "Load script"))
        self.bt_pp_select_script.setText(_translate("MainWindow", "..."))
        self.cb_pp_append_timestamp_to_output_folder.setText(_translate("MainWindow", "Append timestamp to output folder"))
        self.cb_pp_append_experience_name.setText(_translate("MainWindow", "Append experience name to output folder"))
        self.cb_pp_overwrite.setText(_translate("MainWindow", "Overwrite existing files?"))
        self.bt_pp_reset.setText(_translate("MainWindow", "Reset"))
        self.chk_pp_show_last_item.setText(_translate("MainWindow", "Show last processed item (performance hit)"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_pipeline_processor), _translate("MainWindow", "Pipeline processor"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_data_editor), _translate("MainWindow", "Data editor"))
        self.menuFile.setTitle(_translate("MainWindow", "File"))
        self.mnu_recent_parsed_folders.setTitle(_translate("MainWindow", "Recent folders"))
        self.mnu_connect_to_db.setTitle(_translate("MainWindow", "Databases"))
        self.menuView.setTitle(_translate("MainWindow", "Settings"))
        self.menuVideo.setTitle(_translate("MainWindow", "Video"))
        self.menuFrame_duration.setTitle(_translate("MainWindow", "Frame duration"))
        self.menuResolution.setTitle(_translate("MainWindow", "Resolution"))
        self.menuAspect_ratio.setTitle(_translate("MainWindow", "Aspect ratio"))
        self.menuBackground_color.setTitle(_translate("MainWindow", "Background color"))
        self.menu_theme.setTitle(_translate("MainWindow", "Theme"))
        self.menuCode_generation_mode.setTitle(_translate("MainWindow", "Code generation"))
        self.mnu_debug.setTitle(_translate("MainWindow", "Debug"))
        self.menuScript_generator.setTitle(_translate("MainWindow", "Pipeline"))
        self.mnu_tools_root.setTitle(_translate("MainWindow", "Tools"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuView_2.setTitle(_translate("MainWindow", "View"))
        self.actionTPMP.setText(_translate("MainWindow", "TPMP"))
        self.actionTPMP_sample.setText(_translate("MainWindow", "TPMP sample"))
        self.action_switch_db_new.setText(_translate("MainWindow", "New DB"))
        self.actionSelect.setText(_translate("MainWindow", "Select ..."))
        self.actionExit.setText(_translate("MainWindow", "Exit"))
        self.actionEnable_annotations.setText(_translate("MainWindow", "Enable annotations"))
        self.actionEnable_log.setText(_translate("MainWindow", "Enable log"))
        self.actionSave_selected_image.setText(_translate("MainWindow", "Save selected image"))
        self.actionSave_all_images.setText(_translate("MainWindow", "Save all images"))
        self.action_parse_folder.setText(_translate("MainWindow", "Parse folder"))
        self.actionAdd_channel_mask.setText(_translate("MainWindow", "Add Threshold"))
        self.actionAdd_white_balance_fixer.setText(_translate("MainWindow", "Add Pre-processing"))
        self.action_script_merge_select_and.setText(_translate("MainWindow", "And"))
        self.action_script_merge_select_or.setText(_translate("MainWindow", "Or"))
        self.actionSet_contour_cleaner.setText(_translate("MainWindow", "Add Mask cleanup"))
        self.actionDisplay_images.setText(_translate("MainWindow", "Display images"))
        self.actionUse_file_name.setText(_translate("MainWindow", "Use file name"))
        self.action_data_output_none.setText(_translate("MainWindow", "None"))
        self.action_data_output_stdio.setText(_translate("MainWindow", "Std IO"))
        self.action_data_output_file.setText(_translate("MainWindow", "File"))
        self.action_execute_script.setText(_translate("MainWindow", "Execute"))
        self.actionAll.setText(_translate("MainWindow", "All"))
        self.actionNone.setText(_translate("MainWindow", "None"))
        self.action_build_video_from_images.setText(_translate("MainWindow", "Build video from images"))
        self.action_new_script.setText(_translate("MainWindow", "New"))
        self.action_load_script.setText(_translate("MainWindow", "Load..."))
        self.action_save_script.setText(_translate("MainWindow", "Save..."))
        self.action_add_roi_execute_after_pre_processing.setText(_translate("MainWindow", "Add ROI (execute after pre-processing"))
        self.action_roi_execute_before_pre_processing.setText(_translate("MainWindow", "Execute before pre-processing"))
        self.action_roi_execute_after_pre_processing.setText(_translate("MainWindow", "Execute after pre-processing"))
        self.action_roi_execute_after_mask_merger.setText(_translate("MainWindow", "Execute after mask merger"))
        self.act_view_anno_all.setText(_translate("MainWindow", "All"))
        self.act_view_anno_none.setText(_translate("MainWindow", "None"))
        self.act_view_anno_empty.setText(_translate("MainWindow", "No annotation"))
        self.act_view_anno_info.setText(_translate("MainWindow", "Info"))
        self.act_view_anno_ok.setText(_translate("MainWindow", "OK"))
        self.act_view_anno_warning.setText(_translate("MainWindow", "Warning"))
        self.act_view_anno_error.setText(_translate("MainWindow", "Error"))
        self.act_view_anno_critical.setText(_translate("MainWindow", "Critical"))
        self.act_view_anno_source_issue.setText(_translate("MainWindow", "Source issue"))
        self.act_view_anno_unknown.setText(_translate("MainWindow", "Unknown"))
        self.action_save_as_python_script.setText(_translate("MainWindow", "Save as Python script..."))
        self.actionMerge_script_and_toolbox_panels.setText(_translate("MainWindow", "Merge script and toolbox panels"))
        self.actionPut_tools_widgets_in_scroll_panel.setText(_translate("MainWindow", "Put tools widgets in scroll panel"))
        self.action_add_roi.setText(_translate("MainWindow", "Add ROI"))
        self.actionAdd_auto_fill_in_grid_search.setText(_translate("MainWindow", "Add auto fill in grid search"))
        self.actionAdd_buttons_to_add_tool_to_script_next_to_reset_button.setText(_translate("MainWindow", "Add buttons to add tool to script next to reset button"))
        self.actionAdd_roi_to_check_mask_positioning.setText(_translate("MainWindow", "Add roi to check mask positioning"))
        self.actionFix_ROI_display_color_issue_foRectangleRegions.setText(_translate("MainWindow", "Fix ROI display color issue for rectangles"))
        self.actionAdd_more_colors_for_ROI.setText(_translate("MainWindow", "Add more colors for ROI"))
        self.action_create_wrapper_before.setText(_translate("MainWindow", "Create wrapper before"))
        self.action_standard_object_oriented_call.setText(_translate("MainWindow", "Standard object oriented call"))
        self.action_object_oriented_wrapped_with_a_with_clause.setText(_translate("MainWindow", "Object oriented wrapped with a \"with\" clause"))
        self.action_functional_style.setText(_translate("MainWindow", "Functional style"))
        self.action_video_1_second.setText(_translate("MainWindow", "1 second"))
        self.action_video_1_24_second.setText(_translate("MainWindow", "1/24 second"))
        self.action_video_5_second.setText(_translate("MainWindow", "5 seconds"))
        self.action_video_stack_and_jitter.setText(_translate("MainWindow", "Stack & jitter"))
        self.action_video_half_second.setText(_translate("MainWindow", "0.5 seconds"))
        self.action_video_res_first_image.setText(_translate("MainWindow", "First image"))
        self.action_video_res_1080p.setText(_translate("MainWindow", "1080p"))
        self.action_video_res_720p.setText(_translate("MainWindow", "720p"))
        self.action_video_res_576p.setText(_translate("MainWindow", "576p"))
        self.action_video_res_480p.setText(_translate("MainWindow", "480p"))
        self.action_video_res_376p.setText(_translate("MainWindow", "376p"))
        self.action_video_res_240p.setText(_translate("MainWindow", "240p"))
        self.action_video_ar_16_9.setText(_translate("MainWindow", "16/9"))
        self.action_video_ar_4_3.setText(_translate("MainWindow", "4/3"))
        self.action_video_ar_1_1.setText(_translate("MainWindow", "1/1"))
        self.action_video_bkg_color_black.setText(_translate("MainWindow", "Black"))
        self.action_video_bkg_color_white.setText(_translate("MainWindow", "White"))
        self.action_video_bkg_color_silver.setText(_translate("MainWindow", "Silver"))
        self.act_parse_folder_memory.setText(_translate("MainWindow", "Parse folder"))
        self.act_parse_folder_memory.setToolTip(_translate("MainWindow", "Parse folder and create memory database"))
        self.act_clean_parsed_folders.setText(_translate("MainWindow", "Clear"))
        self.actionplace_holder.setText(_translate("MainWindow", "place_holder"))
        self.actionplace_holder_2.setText(_translate("MainWindow", "place_holder"))
        self.action_add_exposure_fixer.setText(_translate("MainWindow", "Add Exposure fixing"))
        self.action_add_feature_extractor.setText(_translate("MainWindow", "Add Feature extraction"))
        self.action_about_form.setText(_translate("MainWindow", "About IPSO Phen"))
        self.action_show_documentation.setText(_translate("MainWindow", "Documentation"))
        self.action_use_dark_theme.setText(_translate("MainWindow", "Dark theme"))
        self.action_build_tool_documentation.setText(_translate("MainWindow", "Build tool documentation"))
        self.action_build_ipso_phen_documentation.setText(_translate("MainWindow", "Build IPSO Phen documentation"))
        self.action_show_read_me.setText(_translate("MainWindow", "Read me"))
        self.action_build_missing_tools_documentation.setText(_translate("MainWindow", "Build missing tools documentation"))
        self.action_new_tool.setText(_translate("MainWindow", "New tool"))
        self.action_use_multithreading.setText(_translate("MainWindow", "Use multithreading"))
        self.action_use_multithreading.setToolTip(_translate("MainWindow", "Do not change !!!"))
        self.action_use_pipeline_cache.setText(_translate("MainWindow", "Use pipeline cache"))
        self.action_show_log.setText(_translate("MainWindow", "Log"))
import main_form_rc
